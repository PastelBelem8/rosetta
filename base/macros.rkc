(provide division
         in-period
         in-interval
         translating
         scaling
         x-rotating
         y-rotating
         z-rotating)

(define-sequence-syntax division
  (lambda () #'division/proc)
  (lambda (stx)
    (syntax-case stx ()
      [[(v) (clause from to elems)]
       #'[(v)
          (clause from to elems #t)]]
      [[(v) (clause from to elems last?)]
       #'[(v)
          (clause from to elems last? #f)]]
      [[(v) (_ from to elems last? ft)]
       #`[(v)
          (:do-in
           ([(a) (cast from Real)] [(b) (cast to Real)] [(n) (cast elems Integer)]
            #,@(case (syntax->datum #'last?)
                 ((#t #f) #'())
                 (else #'([(pred) (if last? <= <)]))))
           (unless (exact-positive-integer? n)
             (raise-type-error 'division "exact non-negative integer" n))
           ([i 0])
           (#,(case (syntax->datum #'last?)
               ((#t) #'<=)
               ((#f) #'<)
               (else #'pred))
            i n)
           ([(v) (if (= i n)
                     b
                     #,(case (syntax->datum #'ft)
                         ((#f) #'(+ a (/ (* i (- b a)) n)))
                         (else #'(+ a (* (ft (/ i n)) (- b a))))))]) ;Extra test to avoid rounding errors
           #true
           #true
           ((+ i 1)))]])))

(define (division/proc [a : Real] [b : Real] [n : Integer] [last? : Boolean #t] [ft : Any #f]) : (Listof Real)
  (if last?
      (if ft
          (for/list : (Listof Real) ([t (division a b n #t ft)])
            t)
          (for/list : (Listof Real) ([t (division a b n #t #f)])
            t))
      (for/list : (Listof Real) ([t (division a b n #f #f)])
        t)))

(provide in-interval)
(define-sequence-syntax in-interval
  (lambda () #'in-interval/proc)
  (lambda (stx)
    (syntax-case stx ()
      [[(v) (_ from to elems)]
       #'[(v)
          (:do-in
           ([(a) from] [(b) to] [(n) elems])
           (unless (exact-positive-integer? n)
             (raise-type-error 'in-interval "exact non-negative integer" n))
           ([i 0])
           (<= i n)
           ([(v) (+ a (/ (* i (- b a)) n))])
           #true
           #true
           ((+ i 1)))]])))

(define (in-interval/proc [a : Real] [b : Real] [n : Integer])
  (for/list : (Listof Real) ([t (in-interval a b n)])
    t))

(provide in-period)
(define-sequence-syntax in-period
  (lambda () #'in-period/proc)
  (lambda (stx)
    (syntax-case stx ()
      [[(v) (_ from to elems)]
       #'[(v)
          (:do-in
           ([(a) from] [(b) to] [(n) elems])
           (unless (exact-positive-integer? n)
             (raise-type-error 'in-period "exact non-negative integer" n))
           ([i 0])
           (< i n)
           ([(v) (+ a (/ (* i (- b a)) n))])
           #true
           #true
           ((+ i 1)))]])))

(define (in-period/proc [a : Real] [b : Real] [n : Integer])
  (for/list : (Listof Real) ([t (in-period a b n)])
    t))


(define-syntax-rule
  (translating dx dy dz body ...)
  (parameterize ((current-cs (translated-cs dx dy dz (current-cs))))
    body ...))

(define-syntax-rule
  (scaling s body ...)
  (let ((r s))
    (parameterize ((current-cs (scaled-cs r r r (current-cs))))
      body ...)))

(define-syntax-rule
  (x-rotating phi body ...)
  (parameterize ((current-cs (x-rotated-cs phi (current-cs))))
    body ...))

(define-syntax-rule
  (y-rotating phi body ...)
  (parameterize ((current-cs (y-rotated-cs phi (current-cs))))
    body ...))

(define-syntax-rule
  (z-rotating phi body ...)
  (parameterize ((current-cs (z-rotated-cs phi (current-cs))))
    body ...))

;; Renders and movies

(provide with-current-layer)
(define-syntax (with-current-layer stx)
  (syntax-case stx ()
    ((_ new-layer body ...)
     (syntax/loc stx
       (let ((old-layer (current-layer)))
         (dynamic-wind
           (lambda () (current-layer new-layer))
           (lambda () body ...)
           (lambda () (current-layer old-layer))))))))

#|
;;To make movies
;;(film "sergelsChange" ((e 2.5 3.5 10 1.5 20)) ...(f ... e ...) ...)

(provide film)
(define-syntax-rule
  (film name ((param init next ...) ...) body ...)
  (let ((param init) ...)
    (start-film name)
    body ...
    (save-film-frame)
    (for ((e (cdr (enumerate-param (list init next ...)))))
      (set! param e)
      body ...
      (retrying (save-film-frame)))
    ...))
|#